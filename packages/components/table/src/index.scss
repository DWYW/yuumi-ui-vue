@import "../../../styles/mixin.scss";

.yuumi-table {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;

  &.__border {
    @include Border();
    border-bottom: none;

    table {
      th, td {
        &:not(:first-child) {
          @include Border($attr: "border-left");
        }
      }
    }

    &.__scroll-end {
      table td, table th {
        &.sticky__right.sticky__first {
          @include BorderColorPartail($attr: "left", $key: "border");
        }
      }
    }
  }

  &.__stripe {
    table tr:nth-child(even) {
      td {
        background-color: getMixColorWithKey("light", "white", 45%);
      }

      &:hover td {
        background-color: getMixColorWithKey("primary", "white", 6%);
      }
    }
  }

  &.__scroll-start {
    table td, table th {
      &.sticky__left.sticky__last::after {
        box-shadow: none;
      }
    }
  }

  &.__scroll-end {
    table td, table th {
      &.sticky__right.sticky__first::after {
        box-shadow: none;
      }
    }
  }

  $_padding: (
    "default": getSpaceWithKey("sm"),
    "middle": getSpaceWithKey("sm", 0.75),
    "small": getSpaceWithKey("xm"),
  );

  @each $key, $value in $_padding {
    &.size__#{$key} table {
      th .column, td .column {
        padding-top: $value;
        padding-bottom: $value;
        @include Space("padding-left", "xm");
        @include Space("padding-right", "xm");
        word-wrap: break-word;
        word-break: break-word;
      }
    }
  }

  table {
    width: 100%;
    height: 100%;

    th .column, td .column {
      text-align: left;

      &._center {
        text-align: center;
      }

      &._right {
        text-align: right;
      }
    }

    th, td {
      @include BackgroundColorWithKey("white");
      @include Border($attr: "border-bottom");
      @include TextColor("secondary");
      box-sizing: border-box;
      transition: background .2s;

      &[class^=sticky] {
        position: sticky;
      }

      $_box-shadow-width: getSpaceWithKey("xm");
      &.sticky__left.sticky__last, &.sticky__right.sticky__first {
        z-index: 2;

        &::after {
          display: block;
          content: "";
          width: $_box-shadow-width;
          height: 100%;
          position: absolute;
          top: 0;
        }
      }

      &.sticky__left.sticky__last {
        border-right-color: transparent;

        &::after {
          right: -$_box-shadow-width;
          @include Shadow(
            $x: $_box-shadow-width,
            $blur: $_box-shadow-width,
            $spread: -$_box-shadow-width,
            $inset: 1
          );
        }
      }

      &.sticky__right.sticky__first {
        border-left-color: transparent;

        &::after {
          left: -$_box-shadow-width;
          @include Shadow(
            $x: -$_box-shadow-width,
            $blur: $_box-shadow-width,
            $spread: -$_box-shadow-width,
            $inset: 1
          );
        }
      }

      &.__scrollbar, &.__scrollbar {
        @include Border($attr: "border-left");
      }
    }

    th.__scrollbar {
      @include BackgroundColorWithKey("white");
      border-bottom: none;
    }

    tr {
      &:hover td{
        background-color: getMixColorWithKey("primary", "white", 6%);
      }
    }
  }

  .table--head, .table--foot {
    width: 100%;
    overflow: hidden;

    table th, table td {
      @include BackgroundColorWithKey("light");
    }
  }

  .table--body {
    overflow: auto;
  }
}